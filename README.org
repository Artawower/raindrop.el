:PROPERTIES:
:ID:       raindrop.el
:END:

#+TITLE: ✨ raindrop.el — Raindrop → Org-mode

#+html: <div align='center'>
#+html: <span class='badge-buymeacoffee'>
#+html: <a href='https://www.paypal.me/darkawower' title='Paypal' target='_blank'><img src='https://img.shields.io/badge/paypal-donate-blue.svg' alt='Buy Me A Coffee donate button' /></a>
#+html: </span>
#+html: <span class='badge-patreon'>
#+html: <a href='https://patreon.com/artawower' target='_blank' title='Donate to this project using Patreon'><img src='https://img.shields.io/badge/patreon-donate-orange.svg' alt='Patreon donate button' /></a>
#+html: </span>
#+html: <a href='https://wakatime.com/badge/github/Artawower/raindrop.el'><img src='https://wakatime.com/badge/github/Artawower/raindrop.el.svg' alt='wakatime'></a>
#+html: </div>
#+html: <div align='center' style='margin-top:6px;'>
#+html: <a href='https://github.com/Artawower/raindrop.el/actions/workflows/ci.yml'>
#+html: <img src='https://github.com/Artawower/raindrop.el/actions/workflows/ci.yml/badge.svg' alt='CI Status'>
#+html: </a>
#+html: </div>

* Introduction
Integrate your [[https://raindrop.io][Raindrop]] bookmarks into Org-mode.

This package provides:
- A dynamic block =#+BEGIN: raindrop ... #+END:= that renders a list of links.
- A helper command to use current heading tags to insert/update a links list.
- An Org-babel language =raindrop= that returns Org-formatted lists.
- An interactive search interface with as-you-type completion and animated spinner.

This is an AI-assisted Emacs package, created in collaboration with a large
language model (OpenAI). Requirements and vision were provided by the author.

* Connected links
- [[https://orgmode.org][Org Mode Documentation]]
- [[https://developer.raindrop.io][Raindrop API Documentation]]
- [[https://raindrop.io][Raindrop service]]

* Screenshots
Search interface
[[./images/search.png]]
Dynamic block
[[./images/org.png]]

* Install
This package requires Emacs 27.1+ and Org 9.4+.

** Elpaca
#+BEGIN_SRC emacs-lisp :results silent
(use-package raindrop
  :defer t
  :ensure (raindrop :host github :repo "artawower/raindrop.el"))
#+END_SRC

Org integration
#+BEGIN_SRC emacs-lisp :results silent
(use-package raindrop-org
  :after raindrop
  :ensure nil
  :defer t)
#+END_SRC

Raindrop search
#+BEGIN_SRC emacs-lisp :results silent
(use-package raindrop-search
  :ensure nil
  :after raindrop
  :bind (("C-c r s" . raindrop-search))
  :defer t)
#+END_SRC

Ob raindrop (dynamic block)
#+BEGIN_SRC emacs-lisp :results silent
(use-package ob-raindrop
  :after (org raindrop)
  :commands (org-babel-execute:raindrop)
  :ensure nil
  :init
  (with-eval-after-load 'org
    (add-to-list 'org-babel-load-languages '(raindrop . t))
    (when (boundp 'org-babel-load-languages)
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))))
#+END_SRC

** package-vc (Emacs 29+)
#+BEGIN_SRC emacs-lisp
(package-vc-install '(raindrop :url "https://github.com/artawower/raindrop.el"))

(use-package raindrop)
(use-package raindrop-org :after org)
(use-package raindrop-search)
(use-package ob-raindrop :after org)
#+END_SRC

* Setup (Token)
For security, prefer [[https://www.gnu.org/software/emacs/manual/html_node/auth/][auth-source]]:
- Create an entry: =machine raindrop.io login token secret <YOUR_TOKEN>=.
- Alternatively export env var =RAINDROP_TOKEN=. You can also set
  =raindrop-custom-token=, but this is less secure.

Example auth-source entry for =.authinfo.gpg=:
#+BEGIN_EXAMPLE
machine raindrop.io login token password 0123456789abcdef
#+END_EXAMPLE

* Usage
Load packages (autoloads are simple; explicit require is fine):
#+BEGIN_SRC emacs-lisp
(require 'raindrop)
(require 'raindrop-org)
(require 'raindrop-search)
(require 'ob-raindrop)
#+END_SRC

** Interactive Search Interface
Use =M-x raindrop-search= for an interactive search with as-you-type completion:
- Search by tags: =#emacs #lisp some text=
- Tags with spaces: =#\"disk usage\" #\"file manager\" backup tools=
- Exclude tags: =#emacs -#outdated= (include emacs, exclude outdated)  
- Exclude spaced tags: =#cli -#\"old tool\" modern tools=
- Mixed search: =#programming -#legacy [Work] project=
- Search by folders: =[Work] project notes=
- Combined search: =#important [Archive] meeting notes=
- Animated ASCII spinner during loading
- Smart collection/tag parsing
- Support for all major completion frameworks (Vertico, Ivy, etc.)

Features:
- Press =RET= to open the selected bookmark in your browser
- Use =M-x raindrop-search-toggle-enter-action= to toggle between opening the original link and the Raindrop app URL
- Embark integration for additional actions (edit, delete, open in different ways)

Embark Actions (when using Embark):
- =o=: Open original link
- =O=: Open in Raindrop app
- =e=: Edit bookmark in dedicated buffer
- =D=: Delete bookmark (with confirmation)
- =c=: Create new bookmark (from clipboard/browser)
- =C=: Create bookmark from URL in kill ring

Customization:
- =raindrop-search-idle-delay=: delay before API request (default 0.25s)
- =raindrop-search-page-size=: number of results per page (default 50)
- =raindrop-search-spinner-frames=: spinner animation frames
- =raindrop-search-spinner-delay=: spinner animation speed
- =raindrop-search-title-max= / =raindrop-search-excerpt-max=: truncation limits

** Creating Bookmarks
Create new bookmarks directly from Emacs using these functions:

- =M-x raindrop-search-create-bookmark=: Create bookmark from any URL
- =M-x raindrop-search-create-from-browser=: Create from clipboard (browser URL)
- =M-x raindrop-search-create-from-kill-ring=: Create from URL in kill ring

All creation functions open an edit buffer where you can:
- Set the title and description
- Add tags (comma-separated: =emacs, productivity, tools=)
- Customize before saving with =C-c C-c=
- Cancel with =C-c C-k=

The edit buffer automatically detects URLs at point or in clipboard for quick bookmarking.

** Insert/Update links under a heading (tags AND)
Add tags to a heading, e.g.:
#+BEGIN_EXAMPLE
* Books                                                        :book:fiction:
#+END_EXAMPLE

Then run:
#+BEGIN_EXAMPLE
M-x raindrop-insert-or-update-links-under-heading
#+END_EXAMPLE

This inserts (or updates) a dynamic block directly in the body of that node,
rendering an Org bullet list in the form:
#+BEGIN_EXAMPLE
- [[https://example.com][Title]] — optional excerpt
#+END_EXAMPLE

Tip: Use =C-u M-x raindrop-insert-or-update-links-under-heading= to switch to
OR semantics for tags just for this run; default is AND.

** Dynamic block (manual)
You can insert a block yourself and refresh with =C-c C-c=:
#+BEGIN_EXAMPLE
#+BEGIN: raindrop :tags "emacs, -outdated, programming" :match all :limit 50
#+END:
#+END_EXAMPLE

Parameters:
- =:tags= string with comma-separated or space-separated tags.
  Supports exclusion with =-tag= syntax (e.g., ="emacs, -outdated, programming"=).
  Both formats work: ="cli -openai macos"= or ="cli, -openai, macos"=.
  Tags with spaces work naturally: ="cli, -openai, -tui with space"=.
- =:folders= string with comma-separated folder names (e.g., ="work, personal"=).
- =:folder= alias for =:folders= that accepts a single folder name.
- =:search= string for text search query (e.g., ="machine learning"=).
- =:exclude-groups= string with comma-separated tags to exclude from smart grouping (e.g., ="cli, terminal"=).
- =:match= =all= (AND, default) or =any= (OR).
- =:collection= numeric collection id (optional, =0= means all). If both
  =:folders= and =:collection= are provided, the folder names are resolved to
  IDs and take precedence.
- =:limit= max items to fetch (default 100).
- =:smart= enable smart auto-grouping by tags (=t= or =nil=, default =nil=).

Examples:
- By folder only:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :folders "Terminal" :match all :limit 20
  #+END:
  #+END_EXAMPLE
- Tags within a folder:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :folders "Work" :tags "cli, -legacy" :match any :limit 30
  #+END:
  #+END_EXAMPLE
- With tag exclusion and smart grouping:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :tags "emacs, -outdated, programming" :match all :limit 25 :smart t
  #+END:
  #+END_EXAMPLE
- Tags with spaces and exclusions:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :tags "cli, -openai, -tui with space" :match all :output org-list :smart t
  #+END:
  #+END_EXAMPLE
- Text search with tags:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :search "machine learning" :tags "python, ai" :match any :limit 20
  #+END:
  #+END_EXAMPLE
- Text search only:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :search "productivity tools" :limit 15 :smart t
  #+END:
  #+END_EXAMPLE
- Smart grouping with excluded groups:
  #+BEGIN_EXAMPLE
  #+BEGIN: raindrop :tags "emacs" :exclude-groups "cli, terminal" :smart t :limit 20
  #+END:
  #+END_EXAMPLE

** Org-babel block
Returns Org-formatted output; use =:results raw replace=:
#+BEGIN_SRC raindrop :tags "emacs, -outdated, programming" :match all :limit 30 :results raw replace
#+END_SRC

Also works with folders:
#+BEGIN_SRC raindrop :folders "Terminal, Work" :match all :limit 20 :results raw replace
#+END_SRC

With tag exclusion and tags with spaces:
#+BEGIN_SRC raindrop :tags "cli, -windows, -system admin" :match all :limit 15 :results raw replace
#+END_SRC

Space-separated format also supported:
#+BEGIN_SRC raindrop :tags "cli -openai macos" :match all :limit 15 :results raw replace
#+END_SRC

With text search:
#+BEGIN_SRC raindrop :search "productivity" :tags "emacs" :match any :limit 10 :results raw replace
#+END_SRC

Text search only:
#+BEGIN_SRC raindrop :search "artificial intelligence" :limit 20 :results raw replace
#+END_SRC

You can also enable via babel languages API:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (require 'ob-raindrop))
#+END_SRC

* Customization
- =raindrop-request-timeout=: request timeout (seconds).
- =raindrop-default-limit=: default fetch limit.
- =raindrop-auth-source-host=: host to look up in auth-source.
- =raindrop-token-source=: order of token sources (auth-source/env/custom).
- =raindrop-links-empty-text=: text when no results.
- =raindrop-heading-tags-match=: default AND/OR for heading tags.

* Notes
- Backend uses =request.el= for HTTP requests and =json-parse-buffer= for JSON parsing.
- Content is inserted idempotently inside a dynamic block.
- Title/excerpt are sanitized for single-line list items.
- Interactive search supports vector-to-list conversion for Raindrop API responses.

* 🍩 Contribute guide
Any contribution is welcome!
Please consider reading the style guide and, if you like this project,
supporting via Patreon. Typical contributions:
- Bug reports, feature requests
- Documentation improvements
- Code patches

This project is licensed under GPLv3 or later. Make sure your contributions
are compatible with this license.

* Tests
This project uses ERT tests located under =test/=.

** Run with Eldev (recommended)
- Install Eldev by following the instructions at https://github.com/emacs-eldev/eldev.
- From the project root, run:
  #+BEGIN_SRC shell
  eldev test
  #+END_SRC

Useful variants:
- Verbose with backtraces: =eldev -dtT test=
- Select specific tests: =eldev test :selector '"raindrop-parse-tags"'=

** Run with plain Emacs (no Eldev)
From the project root:
#+BEGIN_SRC shell
emacs -Q --batch -L . \
  -l raindrop.el -l raindrop-org.el \
  -l test/raindrop-core-tests.el \
  -f ert-run-tests-batch-and-exit
#+END_SRC

Notes:
- Tests are self-contained and do not require a Raindrop token; they do not hit the network.
- Tests automatically handle the =request.el= dependency via Eldev configuration.
